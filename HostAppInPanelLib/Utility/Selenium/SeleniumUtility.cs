using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Threading;
using HostAppInPanelLib.Utility.Win32;
using HostAppInPanelLib.Utility.Windows;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;
using OpenQA.Selenium.Firefox;

namespace HostAppInPanelLib.Utility.Selenium
{
    public partial class SeleniumUtility
    {
        private static Thread FindBrowserWindow(Action<IntPtr> setChromeWindow,
            Tuple<Func<IEnumerable<IntPtr>>, string> tuple)
        {
            void Start(object param)
            {
                var tupleFromParam = (Tuple<Func<IEnumerable<IntPtr>>, string>) param;
                var findWindows = tupleFromParam.Item1;
                var title = tupleFromParam.Item2;
                Process processById;
                IntPtr window;
                do
                {
                    uint processId;
                    do
                    {
                        var windowTitles = findWindows.Invoke()
                            .FindWindowByTitle(title)
                            .ToArray();
                        window = windowTitles.FirstOrDefault();
                        Win32Interop.ShowWindowAsync(window, ShowInfo.Minimize);
                        Win32Interop.GetWindowThreadProcessId(window, out processId);
                    } while (processId == 0);
                    Win32Interop.GetWindowThreadProcessId(window, out processId);
                    processById = Process.GetProcessById(unchecked((int) processId));
                } while (processById.HasExited);
                Win32Interop.ShowWindowAsync(window, ShowInfo.ShowMinimized);
                setChromeWindow(window);
            }

            Thread thread = new Thread(Start);
            thread.Priority = ThreadPriority.AboveNormal;
            thread
                .Start(tuple);
            return thread;
        }

        public static List<Process> GetBrowserProcesses(int processId)
        {
            //create list of process id
            var driverProcessIds = GetSeleniumProcesses(processId, true).Where(p => p.ProcessName.ToLower() == "chrome")
                .ToList();

            return driverProcessIds;
        }

        public static List<Process> GetSeleniumProcesses(int processId, bool includeChrome)
        {
            //create list of process id
            var driverProcessIds = new List<Process>();

            //Get all the childs generated by the driver like conhost, chrome.exe...
            var mos = new ManagementObjectSearcher(
                $"Select * From Win32_Process Where ParentProcessID={processId}");
            driverProcessIds.Add(Process.GetProcessById(processId));
            foreach (var mo in mos.Get())
            {
                var pid = Convert.ToInt32(mo["ProcessID"]);
                try
                {
                    var processById = Process.GetProcessById(pid);
                    if (!includeChrome && processById.ProcessName == "chrome")
                    {
                        continue;
                    }
                    driverProcessIds.Add(processById);
                }
                catch (Exception e)
                {
                    Debug.Write($"Process not running: {e}");
                }
            }
            return driverProcessIds;
        }

        public static void KillSeleniumProcesses(int processId)
        {
            var seleniumProcesses = GetSeleniumProcesses(processId, false);
            foreach (var seleniumProcess in seleniumProcesses)
            {
                if (!seleniumProcess.HasExited)
                {
                    seleniumProcess.Kill();
                }
            }
        }
    }
}