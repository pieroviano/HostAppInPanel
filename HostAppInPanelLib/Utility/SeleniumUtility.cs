using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Management;
using System.Threading;
using HostAppInPanelLib.Utility.Chrome;
using HostAppInPanelLib.Utility.Win32;
using OpenQA.Selenium;
using OpenQA.Selenium.Chrome;

namespace HostAppInPanelLib.Utility
{
    public class SeleniumUtility
    {
        public static IWebDriver GetChromeDriverHidden(out ChromeDriverService chromeDriverService, IntPtr containerHandle, Action<IntPtr> setChromeWindow)
        {
            chromeDriverService = ChromeDriverService.CreateDefaultService();
            chromeDriverService.HideCommandPromptWindow = true;
            var options = new ChromeOptions();
            options.AddArgument("about:blank");
            options.AddArgument("--new-window");
            options.AddArgument("--window-position=-1000,-1000");
            options.AddArgument("--window-size=1,1");
            options.AddArgument("--disable-infobars");
            options.AddArgument("--start-minimized");

            void Start()
            {
                Process processById;
                IntPtr chromeWindow;
                do
                {
                    uint processId;
                    do
                    {
                        var chromeWindowTitles = ChromeWindowFinder.ChromeWindows()
                            .FindWindowByTitle("data:, - Google Chrome")
                            .ToArray();
                        chromeWindow = chromeWindowTitles.FirstOrDefault();
                        Win32Interop.GetWindowThreadProcessId(chromeWindow, out processId);
                    } while (processId == 0);
                    Win32Interop.GetWindowThreadProcessId(chromeWindow, out processId);
                    processById = Process.GetProcessById(unchecked((int) processId));
                } while (processById.HasExited);
                Win32Interop.ShowWindowAsync(chromeWindow, ShowInfo.ShowMinimized);
                setChromeWindow(chromeWindow);
            }

            var thread = new Thread(Start);
            thread.Priority=ThreadPriority.AboveNormal;
            thread
                .Start();
            return new ChromeDriver(chromeDriverService, options);
        }

        public static List<Process> GetSeleniumProcesses(ChromeDriverService chromeDriverService, bool includeChrome)
        {
            //create list of process id
            var driverProcessIds = new List<Process>();

            //Get all the childs generated by the driver like conhost, chrome.exe...
            var mos = new ManagementObjectSearcher(
                $"Select * From Win32_Process Where ParentProcessID={chromeDriverService.ProcessId}");
            driverProcessIds.Add(Process.GetProcessById(chromeDriverService.ProcessId));
            foreach (var mo in mos.Get())
            {
                var pid = Convert.ToInt32(mo["ProcessID"]);
                try
                {
                    var processById = Process.GetProcessById(pid);
                    if (!includeChrome && processById.ProcessName == "chrome")
                    {
                        continue;
                    }
                    driverProcessIds.Add(processById);
                }
                catch (Exception e)
                {
                    Debug.Write($"Process not running: {e}");
                }
            }
            return driverProcessIds;
        }
        public static List<Process> GetChromeProcesses(ChromeDriverService chromeDriverService)
        {
            //create list of process id
            var driverProcessIds = GetSeleniumProcesses(chromeDriverService, true).Where(p => p.ProcessName.ToLower() == "chrome").ToList();

            return driverProcessIds;
        }

        public static void KillSeleniumProcesses(ChromeDriverService chromeDriverService)
        {
            var seleniumProcesses = SeleniumUtility.GetSeleniumProcesses(chromeDriverService, false);
            foreach (var seleniumProcess in seleniumProcesses)
            {
                if (!seleniumProcess.HasExited)
                {
                    seleniumProcess.Kill();
                }
            }
        }
    }
}